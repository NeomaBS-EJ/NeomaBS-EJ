package routines;

import java.math.BigInteger;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ControlesDonnees {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
       
	public static boolean verifierIBAN(String iban) {
        if (iban == null || iban.isEmpty())
            return true;

        // \p{Upper}{2}    : code pays (ISO 3166)
        // \d{2}           : chiffres de v�rification
        // \p{Alnum}{1,30} :
        //     - BBAN (= Basic Bank Account Number), sans s�parateur ni ponctuation comme il peut y en
        //       avoir dans les num�ros de compte nationaux (ex : RIB)
        //     - Longueur fixe par pays
        //     - Doit contenir un identifiant bancaire ayant une position et une longueur fixe par pays
        if (! iban.matches("^\\p{Upper}{2}\\d{2}\\p{Alnum}{1,30}$"))
            return false;

        // B.2 Validating the check digits in an IBAN
        // B.2.1 The following is a method for validating the check digits of an IBAN,
        //       e.g.: CZ6508000000192000145399

        // B.2.2 Move the first four characters of the IBAN to the right of the IBAN, e.g., 08000000192000145399CZ65
        iban = iban.substring(4) + iban.substring(0, 4);

        // B.2.3 Convert the alpha characters to numeric characters in accordance with 6.2.3,
        // e.g., 08000000192000145399123565
        StringBuilder ibanNumerique = new StringBuilder(iban.length());
        for (int i = 0; i < iban.length(); i++)
            ibanNumerique.append(Character.getNumericValue(iban.charAt(i)));

        // B.2.4 Calculate the modulo 97 (the remainder after division by 97) (ISO 7064 (MOD 97-10)),
        //       e.g., the remainder after division of 08000000192000145399123565 by 97 is one (1)
        // B.2.5 If the remainder is one (1) then the check digits are correct for this IBAN.
        return new BigInteger(ibanNumerique.toString()).remainder(new BigInteger("97")).intValue() == 1;
    }
	

    public static boolean verifierNIR(String nirCle) {
        if (nirCle == null || nirCle.isEmpty())
            return true;
        
        // Type "NIRAvecCleType" (voir �20)
        if (! nirCle.matches("^[0-9]{6}[0-9AB][0-9]{8}$"))
            return false;
        
        String nir = nirCle.substring(0, 13);
        String cle = nirCle.substring(13, 15);
        
        // Le contr�le de la cl� est fait sur le mod�le impl�ment� en XSLT (voir �36)
        long nirAjuste;
        if (nir.contains("A"))
            nirAjuste = Long.parseLong(nir.replace("A", "0")) - 1000000;
        else if (nir.contains("B"))
            nirAjuste = Long.parseLong(nir.replace("B", "0")) - 2000000;
        else
            nirAjuste = Long.parseLong(nir);
        
        int cleCalculee = new BigInteger("97").subtract(BigInteger.valueOf(nirAjuste).remainder(new BigInteger("97"))).intValue();
        return cleCalculee == Integer.valueOf(cle).intValue();
    }
    
    public static boolean verifierRIB(String rib) {
        if (rib == null || rib.isEmpty())
            return true;

        // \d{5}         : code �tablissement
        // \d{5}         : code guichet
        // \p{Alnum}{11} : num�ro du compte
        // \d{2}         : cl� de contr�le
        if (! rib.matches("^\\d{5}\\d{5}\\p{Alnum}{11}\\d{2}$"))
            return false;

        // L'algorithme ci-dessous vient de : http://fr.wikipedia.org/wiki/Basic_Bank_Account_Number
        // Remarque : aucune r�f�rence � une norme ou � un document officiel sur le RIB n'a �t� trouv�e sur le web.
        StringBuilder ribNumerique = new StringBuilder(rib.length());

        for (char car : rib.toCharArray()) {
            int valeurCar = Character.digit(car, Character.MAX_RADIX);
            // Formule qui transforme chaque lettre en un chiffre. Elle donne le m�me r�sultat que la table de correspondance.
            ribNumerique.append(valeurCar < 10
                    ? valeurCar
                    : (valeurCar + (int) StrictMath.pow(2, (valeurCar - 10) / 9)) % 10);
        }

        return new BigInteger(ribNumerique.toString()).remainder(new BigInteger("97")).intValue() == 0;
    }    	
}
